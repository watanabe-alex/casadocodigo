"use strict";

var complain;

class ServerComponent {
  constructor(id, input, out, typeName, customEvents, scope) {
    this.id = id;
    this.R_ = customEvents;
    this.K_ = scope;
    this._V_ = undefined;
    this.T_ = undefined;
    this.M_ = undefined;
    this.typeName = typeName;
    this.Q_ = undefined; // Used to keep track of bubbling DOM events for components rendered on the server
    this._W_ = 0;

    if (this.onCreate !== undefined) {
      this.onCreate(input, out);
    }

    if (this.onInput !== undefined) {
      var updatedInput = this.onInput(input, out) || input;

      if (this.T_ === undefined) {
        this.T_ = updatedInput;
      }

      this._V_ = updatedInput;
    } else {
      this.T_ = this._V_ = input;
    }

    if (this.onRender !== undefined) {
      this.onRender(out);
    }
  }

  set input(newInput) {
    this.T_ = newInput;
  }

  get input() {
    return this.T_;
  }

  set state(newState) {
    this.M_ = newState;
  }

  get state() {
    return this.M_;
  }

  get _v_() {
    return this.M_;
  }

  elId(nestedId) {
    var id = this.id;

    if (nestedId == null) {
      return id;
    } else {
      if (typeof nestedId !== "string") {

        nestedId = String(nestedId);
        // eslint-disable-next-line no-constant-condition
      }

      if (nestedId.indexOf("#") === 0) {
        id = "#" + id;
        nestedId = nestedId.substring(1);
      }

      return id + "-" + nestedId;
    }
  }
}

ServerComponent.prototype.getElId = ServerComponent.prototype.elId;

module.exports = ServerComponent;