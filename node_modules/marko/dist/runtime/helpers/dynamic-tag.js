"use strict";

var complain;
var changeCase = require("./_change-case");
var ComponentsContext = require("../components/ComponentsContext");
var getComponentsContext = ComponentsContext.r_;
var ComponentDef = require("../components/ComponentDef");
var w10NOOP = require("warp10/constants").NOOP;
var RENDER_BODY_TO_JSON = function () {
  return w10NOOP;
};
var FLAG_WILL_RERENDER_IN_BROWSER = 1;
var IS_SERVER = typeof window === "undefined";

/**
 * Helper to render a dynamic tag
 */
module.exports = function dynamicTag(out, tag, getAttrs, renderBody, args, props, componentDef, key, customEvents) {
  if (tag) {
    var attrs = getAttrs && getAttrs();
    var component = componentDef && componentDef.m_;
    if (typeof tag === "string") {
      if (isNaN(key)) {
        key = "@" + key;
      }

      if (customEvents) {
        if (!props) {
          props = {};
        }

        customEvents.forEach(function (eventArray) {
          props["on" + eventArray[0]] = componentDef.d(eventArray[0], eventArray[1], eventArray[2], eventArray[3]);
        });
      }

      if (renderBody) {
        out.aQ_(tag, attrs, key, componentDef, props);
        renderBody(out);
        out.aR_();
      } else {
        out.aS_(tag, attrs, key, componentDef, props);
      }
    } else {
      if (attrs == null) {
        attrs = {};
      } else if (typeof attrs === "object") {
        attrs = Object.keys(attrs).reduce(function (r, key) {
          r[changeCase.aP_(key)] = attrs[key];
          return r;
        }, {});
      }

      if (renderBody) {
        attrs.renderBody = renderBody;
      }

      var renderer = tag._ || tag.render || tag.renderer && tag.renderer.renderer || tag.renderer;

      // eslint-disable-next-line no-constant-condition


      if (renderer) {
        out.c(componentDef, key, customEvents);
        renderer(attrs, out);
        out.l_ = null;
      } else {
        var render = tag && tag.renderBody || tag;
        var isFn = typeof render === "function";

        if (render.safeHTML) {

          out.write(tag.safeHTML);
          // eslint-disable-next-line no-constant-condition

          return;
        }

        if (isFn) {
          var flags = componentDef ? componentDef._G_ : 0;
          var willRerender = flags & FLAG_WILL_RERENDER_IN_BROWSER;
          var isW10NOOP = render === w10NOOP;
          var preserve = IS_SERVER ? willRerender : isW10NOOP;
          out.p_(key, component, preserve);
          if (!isW10NOOP && isFn) {
            var componentsContext = getComponentsContext(out);
            var parentComponentDef = componentsContext._N_;
            var globalContext = componentsContext.j_;
            componentsContext._N_ = new ComponentDef(component, parentComponentDef.id + "-" + parentComponentDef._I_(key), globalContext);
            render.toJSON = RENDER_BODY_TO_JSON;

            if (args) {
              render.apply(null, [out].concat(args, attrs));
            } else {
              render(out, attrs);
            }

            componentsContext._N_ = parentComponentDef;
          }
          out.q_();
        } else {
          out.error("Invalid dynamic tag value");
        }
      }
    }
  } else if (renderBody) {
    var compFlags = componentDef ? componentDef._G_ : 0;
    out.p_(key, component, IS_SERVER ? compFlags & FLAG_WILL_RERENDER_IN_BROWSER : render === w10NOOP);
    renderBody(out);
    out.q_();
  }
};